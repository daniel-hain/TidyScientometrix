install_github_package("daniel-hain/TidyScientometrix")
install_github("daniel-hain/TidyScientometrix")
############################################################################
# Preamble
############################################################################
# generic preamble
source("C:/Users/Admin/R_functions/preamble.R")
# Load packages
library(tidyverse)
library(magrittr)
library(feather)
library(tidygraph)
library(ggraph)
library(ForceAtlas2) # devtools::install_github("analyxcompany/ForceAtlas2")
############################################################################
# Load data
############################################################################
el <- read_feather("input/june2019_edgelist.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/june2019_add_acc_edgelist.feather") %>% mutate(core = 0) ) %>%
as_tibble()
mentions <- read_feather("input/june2019_mentionsdat.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/june2019_add_acc_mentionsdat.feather") %>% mutate(core = 0) ) %>%
as_tibble()
tweets <- read_feather("input/june2019_tweetdat.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/june2019_add_acc_tweetdat.feather") %>% mutate(core = 0) ) %>%
as_tibble()
tweets
x <- read_feather("input/augustTweets_core.feather")
y <- read_feather("input/augustTweets.feather")
x
mentions
tweets <- read_feather("input/augustTweets_core.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
as_tibble()
tweets
View(tweets)
############################################################################
# Preamble
############################################################################
# generic preamble
source("C:/Users/Admin/R_functions/preamble.R")
# Load packages
library(tidyverse)
library(magrittr)
library(feather)
library(tidygraph)
library(ggraph)
library(ForceAtlas2) # devtools::install_github("analyxcompany/ForceAtlas2")
############################################################################
# Load data
############################################################################
#el <- read_feather("input/june2019_edgelist.feather") %>%
#  mutate(core = 1) %>%
#  bind_rows( read_feather("input/june2019_add_acc_edgelist.feather") %>% mutate(core = 0) ) %>%
#  as_tibble()
#mentions <- read_feather("input/june2019_mentionsdat.feather") %>%
#  mutate(core = 1) %>%
#  bind_rows( read_feather("input/june2019_add_acc_mentionsdat.feather") %>% mutate(core = 0) ) %>%
#  as_tibble()
tweets <- read_feather("input/augustTweets_core.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
as_tibble()
# remove tweets without one retweet
tweets %<>%
filter(retweet_count >= 1)
tweets
# remove tweets without one retweet
tweets %<>%
filter(retweet_count >= 1) %>%
distinct()
# generate edgelist
el <- tweets %>%
select(user, mention, tweet_id, retweet_count) %>%
rename(from = user, to = mention)
View(el)
el_agg <- el %>%
count(from, to, name = "weight") %>%
select(from, to, weight) %>%
arrange(from, to) %>%
### Generate nodelist
nodes <- tweets %>%
select(userID, userName, userScreen, userLocation, userDesc, userFollowerCt, userFriendsCt, userCreateDt, core) %>%
distinct(userName, .keep_all = TRUE)
el_agg <- el %>%
count(from, to, name = "weight") %>%
select(from, to, weight) %>%
arrange(from, to)
View(el_agg)
### Generate nodelist
nodes <- tweets %>%
select(userID, userName, userScreen, userLocation, userDesc, userFollowerCt, userFriendsCt, userCreateDt, core) %>%
distinct(userName, .keep_all = TRUE)
tweets
tweets <- read_feather("input/augustTweets_core.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
as_tibble()
# remove tweets without one retweet
tweets %<>%
filter(retweet_count >= 1) %>%
distinct()
el_agg <- el %>%
count(from, to, name = "weight") %>%
select(from, to, weight) %>%
arrange(from, to)
tweets <- read_feather("input/augustTweets_core.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
as_tibble()
# remove tweets without one retweet
tweets %<>%
filter(retweet_count >= 1) %>%
distinct()
tweets
View(tweets)
nodes <- tweets %>%
select(user, location, intro, core) %>%
distinct(user, .keep_all = TRUE)
# Filter out nodes from different locations
nodes_red <- nodes %>%
filter(core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya")))
### Create graph
g <- el_agg %>%
as_tbl_graph(directed = TRUE)
# join with nodes and restrict
g <- g %N>%
inner_join(nodes_red, by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
# Reduce graph
cut.edge = 2 # For first edge filtering
cut.node = 0 # In case we want to filter nodes by degree
cut.quant = 0 # In case we want to filter nodes by degree-quantile
cut.com = 1 # In case we want to delete nodes by communities size
cut.com2 = 5 # To delete communities (not node, only label) under a certain size
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
### Create graph
g <- el_agg %>%
as_tbl_graph(directed = TRUE)
# join with nodes and restrict
g <- g %N>%
inner_join(nodes_red, by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
g
### Generate nodelist
nodes <- tweets %>%
select(user, location, intro, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
nodes
# Filter out nodes from different locations
nodes_red <- nodes %>%
filter(core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya")))
### Create graph
g <- el_agg %>%
as_tbl_graph(directed = TRUE)
# join with nodes and restrict
g <- g %N>%
inner_join(nodes_red, by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
# Reduce graph
cut.edge = 2 # For first edge filtering
cut.node = 0 # In case we want to filter nodes by degree
cut.quant = 0 # In case we want to filter nodes by degree-quantile
cut.com = 1 # In case we want to delete nodes by communities size
cut.com2 = 5 # To delete communities (not node, only label) under a certain size
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalkculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
# Version with edge color = community
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
############################################################################
# Preamble
############################################################################
# generic preamble
source("C:/Users/Admin/R_functions/preamble.R")
# Load packages
library(tidyverse)
library(magrittr)
library(feather)
library(tidygraph)
library(ggraph)
library(ForceAtlas2) # devtools::install_github("analyxcompany/ForceAtlas2")
############################################################################
# Load data
############################################################################
#el <- read_feather("input/june2019_edgelist.feather") %>%
#  mutate(core = 1) %>%
#  bind_rows( read_feather("input/june2019_add_acc_edgelist.feather") %>% mutate(core = 0) ) %>%
#  as_tibble()
#mentions <- read_feather("input/june2019_mentionsdat.feather") %>%
#  mutate(core = 1) %>%
#  bind_rows( read_feather("input/june2019_add_acc_mentionsdat.feather") %>% mutate(core = 0) ) %>%
#  as_tibble()
tweets <- read_feather("input/augustTweets_core.feather") %>%
mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
as_tibble()
# remove tweets without one retweet
tweets %<>%
filter(retweet_count >= 1) %>%
distinct()
############################################################################
# Netwok creation
############################################################################
# generate edgelist
el <- tweets %>%
select(user, mention, tweet_id, retweet_count) %>%
rename(from = user, to = mention)
el_agg <- el %>%
count(from, to, name = "weight") %>%
select(from, to, weight) %>%
arrange(from, to)
### Generate nodelist
nodes <- tweets %>%
select(user, location, intro, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
# Filter out nodes from different locations
nodes_red <- nodes %>%
filter(core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya")))
### Create graph
g <- el_agg %>%
as_tbl_graph(directed = TRUE)
# join with nodes and restrict
g <- g %N>%
inner_join(nodes_red, by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
############################################################################
# Fine tune graph
############################################################################
# Reduce graph
cut.edge = 5 # For first edge filtering
cut.node = 0 # In case we want to filter nodes by degree
cut.quant = 0 # In case we want to filter nodes by degree-quantile
cut.com = 1 # In case we want to delete nodes by communities size
cut.com2 = 5 # To delete communities (not node, only label) under a certain size
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
############################################################################
# Plot graph
############################################################################
# Version with edge color = community
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
# create a dataframe to inspect (only show top 10 per community)
com_df <- g %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
# slice(1:10) %>%
ungroup()
com_df %>%
write_csv("output/communities.csv")
# Version with edge color = community
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
filter(core = 1) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
# Version with edge color = community
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
filter(core == 1) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph_core.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
# generate edgelist
el <- tweets %>%
select(user, mention, tweet_id, retweet_count) %>%
rename(from = user, to = mention)
el_agg <- el %>%
count(from, to, name = "weight") %>%
select(from, to, weight) %>%
arrange(from, to)
### Generate nodelist
nodes <- tweets %>%
select(user, location, intro, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
# Filter out nodes from different locations
nodes_red <- nodes %>%
filter(core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya")))
### Create graph
g <- el_agg %>%
as_tbl_graph(directed = TRUE)
# join with nodes and restrict
g <- g %N>%
inner_join(nodes_red, by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
############################################################################
# Fine tune graph
############################################################################
# Reduce graph
cut.edge = 2 # For first edge filtering
cut.node = 0 # In case we want to filter nodes by degree
cut.quant = 0 # In case we want to filter nodes by degree-quantile
cut.com = 1 # In case we want to delete nodes by communities size
cut.com2 = 5 # To delete communities (not node, only label) under a certain size
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
############################################################################
# Plot graph
############################################################################
# Version with edge color = community
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
filter(core == 1) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph_core.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
# Full network
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph_full.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
# Full networkg %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
mutate(name = ifelse(dgr_in >= label_cut, name, NA)) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
# Full network
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
mutate(name = ifelse(dgr_in >= label_cut, name, NA)) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
#Define when labels schold be shown
label_cut = 5
# Full network
g %E>%
mutate(com_from = .N()$com[from] %>% as.factor()) %N>%
mutate(com = com %>% as.factor()) %>%
mutate(name = ifelse(dgr_in >= label_cut, name, NA)) %>%
ggraph(layout = "graphopt") +
geom_edge_fan(aes(width = weight, alpha = weight, edge_color = com_from), spread = 2, arrow = arrow(length = unit(2, "mm"), type = "open")) +
geom_node_point(aes(size = dgr_in, col = com)) +
geom_node_text(aes(label = name, size = dgr_in / 2), repel = TRUE) +
ggtitle("Nairobi Twitter Network", subtitle ="Directed and weighted") +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
ggsave("graph_full.pdf", path ="output/figures/", width = 30, height = 20, units = "cm"); graphics.off()
# create a dataframe to inspect (only show top 10 per community)
com_df <- g %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
# slice(1:10) %>%
ungroup()
com_df %>%
write_csv("output/communities.csv")
