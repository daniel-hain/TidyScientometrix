filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight,directed = T))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
return(g)
}
detect_com <- function(g, cut.com = 1, cut.com2 = 1){
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight, directed = T))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
return(g)
}
############################################################################
####### Load data #####
############################################################################
mentions <- read_feather("input/augustTweets_core.feather") %>% mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
bind_rows( read_feather("input/augustTweets_add.feather") %>% # Bec
left_join(read_csv("input/core_acc.csv"), by = "user")
) %>%
as_tibble() %>%
mutate(core = core %>% as.factor()) %>%
drop_na(user)
### Generate nodelist
nodes <- mentions %>%
select(user_id, user, location, intro, account_created, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
# Label Node Types
nodes %<>%
mutate(local = ifelse((core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya|africa") | (intro %>% tolower() %>% str_detect("nairobi|kenya")))), 1, 0),
support = ifelse((intro %>% tolower() %>% str_detect("hub|incubator|accelerator|co-working|invest|funding|aid")), 1, 0))
############################################################################
##### Network
############################################################################
#### Create full graph ####
g0 <- mentions %>%
rename(from = user, to = mention) %>%
select(from, to) %>%
count(from, to, name = "weight") %>%
arrange(from, to) %>%
as_tbl_graph(directed = TRUE)
# CORE STARTUPS GRAPH
g2<- g0 %N>%
inner_join(nodes %>% filter(core == 1), by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
# KENYA GRAPH
g <- g0 %N>%
inner_join(nodes, by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
############################################################################
# Preamble
############################################################################
# generic preamble
source("C:/Users/Admin/R_functions/preamble.R")
# Load packages
library(tidyverse)
library(magrittr)
library(feather)
library(tidygraph)
library(ggraph)
############################################################################
# Define functions
############################################################################
filter_graph <- function(g, cut.edge = 1, cut.node = 1, cut.quant = 0){
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight,directed = T))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
return(g)
}
detect_com <- function(g, cut.com = 1, cut.com2 = 1){
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight, directed = T))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
return(g)
}
############################################################################
####### Load data #####
############################################################################
mentions <- read_feather("input/augustTweets_core.feather") %>% mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
bind_rows( read_feather("input/augustTweets_add.feather") %>% # Bec
left_join(read_csv("input/core_acc.csv"), by = "user")
) %>%
as_tibble() %>%
mutate(core = core %>% as.factor()) %>%
drop_na(user)
### Generate nodelist
nodes <- mentions %>%
select(user_id, user, location, intro, account_created, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
# Label Node Types
nodes %<>%
mutate(local = ifelse((core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya|africa") | (intro %>% tolower() %>% str_detect("nairobi|kenya")))), 1, 0),
support = ifelse((intro %>% tolower() %>% str_detect("hub|incubator|accelerator|co-working|invest|funding|aid")), 1, 0))
############################################################################
##### Network
############################################################################
#### Create full graph ####
g <- mentions %>%
rename(from = user, to = mention) %>%
select(from, to) %>%
count(from, to, name = "weight") %>%
arrange(from, to) %>%
as_tbl_graph(directed = TRUE)
# CORE STARTUPS GRAPH
g.core<- g %N>%
inner_join(nodes %>% filter(core == 1), by = "name") # NOTE: inner_join to delete the non-matches with the nodelist
############################################################################
# Preamble
############################################################################
# generic preamble
source("C:/Users/Admin/R_functions/preamble.R")
# Load packages
library(tidyverse)
library(magrittr)
library(feather)
library(tidygraph)
library(ggraph)
############################################################################
# Define functions
############################################################################
filter_graph <- function(g, cut.edge = 1, cut.node = 1, cut.quant = 0){
# Filter by edgeweight
g <- g %E>%
filter(!edge_is_loop()) %>%
filter(weight >= cut.edge)
# Calculate degrees
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight,directed = T))
# Filter by node degree
g <- g %N>%
filter(!node_is_isolated()) %>% # To filter out isolated
filter(dgr_in >= cut.node | core == 1) %>%
filter(dgr_in >= quantile(dgr_in, cut.quant, na.rm = TRUE) | core == 1)
return(g)
}
detect_com <- function(g, cut.com = 1, cut.com2 = 1){
# Do the (undirected) community detection
g <- g %N>%
morph(to_undirected) %>%
mutate(com = group_louvain(weights = weight) %>% as.factor()) %>%
unmorph() %N>%
group_by(com) %>% mutate(com_n = n())  %>% ungroup()
# filter by community size
g <- g %N>%
filter(com_n >= 2| core == 1) %>%
mutate(com = ifelse(com_n >= cut.com2, com, NA))
# Recalculate new degree
g <- g %N>%
mutate(dgr_in = centrality_degree(weights = weight, mode = "in"),
dgr_out = centrality_degree(weights = weight, mode = "out"),
dgr_bet = centrality_betweenness(weights = weight, directed = T))
# create community internal centrality
g  %<>%
morph(to_split, com) %>%
mutate(dgr_in_int = centrality_degree(weights = weight, mode = "in"),
dgr_out_int = centrality_degree(weights = weight, mode = "out")) %>%
unmorph()
return(g)
}
############################################################################
####### Load data #####
############################################################################
mentions <- read_feather("input/augustTweets_core.feather") %>% mutate(core = 1) %>%
bind_rows( read_feather("input/augustTweets.feather") %>% mutate(core = 0) ) %>%
bind_rows( read_feather("input/augustTweets_add.feather") %>% # Bec
left_join(read_csv("input/core_acc.csv"), by = "user")
) %>%
as_tibble() %>%
mutate(core = core %>% as.factor()) %>%
drop_na(user)
### Generate nodelist
nodes <- mentions %>%
select(user_id, user, location, intro, account_created, core) %>%
distinct(user, .keep_all = TRUE) %>%
rename(name = user)
# Label Node Types
nodes %<>%
mutate(local = ifelse((core == 1 | (location %>% tolower() %>% str_detect("nairobi|kenya|africa") | (intro %>% tolower() %>% str_detect("nairobi|kenya")))), 1, 0),
support = ifelse((intro %>% tolower() %>% str_detect("hub|incubator|accelerator|co-working|invest|funding|aid")), 1, 0))
############################################################################
##### Network
############################################################################
#### Create full graph ####
g <- mentions %>%
rename(from = user, to = mention) %>%
select(from, to) %>%
count(from, to, name = "weight") %>%
arrange(from, to) %>%
as_tbl_graph(directed = TRUE)
# CORE STARTUPS GRAPH
g.core<- g %N>%
inner_join(nodes %>% filter(core == 1), by = "name") %>%
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 3)
# KENYA GRAPH
g.kenya <- g %N>%
inner_join(nodes %>% filter(core == 1 | local == 1), by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
# Support graph
g.support <- g %N>%
inner_join(nodes %>% filter(core == 1 | local == 1 | support = 1), by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
# Full graph
g.full <- g %N>%
inner_join(nodes, by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
# CORE STARTUPS GRAPH
g.core<- g %N>%
inner_join(nodes %>% filter(core == 1), by = "name") %>%
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 3)
# KENYA GRAPH
g.kenya <- g %N>%
inner_join(nodes %>% filter(core == 1 | local == 1), by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
# Support graph
g.support <- g %N>%
inner_join(nodes %>% filter(core == 1 | local == 1 | support == 1), by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
# Full graph
g.full <- g %N>%
inner_join(nodes, by = "name") %>% # NOTE: inner_join to delete the non-matches with the nodelist
filter_graph() %>%
detect_com(cut.com = 1, cut.com2 = 5)
plot_graph = function(g, title = NULL, subtitle = NULL,
density = FALSE,
label.cut = 0
){
# Prepare graph
g <- g %E>%
mutate(com_from = .N()$com[from] %>% as.factor(),
com_to= .N()$com[to] %>% as.factor(),) %N>%
mutate(com = com %>% as.factor(),
local = local%>% as.factor(),
support = support %>% as.factor())
# Restrict labelæs
g <- g %N>%
mutate(name = ifelse(dgr_in >= quantile(dgr_in, label.cut, na.rm = TRUE), name, NA))
# Plot nodes & Edges
plot <- g %>%
ggraph(layout = 'fr') +
geom_edge_fan(aes(alpha = weight, edge_color = com_from) ,show.legend = F, spread = 1, arrow = arrow(length = unit(.1, "mm"), type = "closed")) +
geom_node_point(aes(size = dgr_bet, col = com,shape = core)) +
geom_node_text(aes(label = name, size = dgr_in), repel = TRUE)
# Plot density or not?
if(density = TRUE){
plot <- plot +
geom_edge_density(aes(fill = com_from), show.legend = F)
}
# Final graph cosmetics
plot <- plot +
ggtitle(title = title, subtitle = subtitle)
theme_graph(base_family = "sans") +
guides(edge_color = "none")
return(plot)
}
plot_graph = function(g, title = NULL, subtitle = NULL,
density = FALSE,
label.cut = 0
){
# Prepare graph
g <- g %E>%
mutate(com_from = .N()$com[from] %>% as.factor(),
com_to= .N()$com[to] %>% as.factor()) %N>%
mutate(com = com %>% as.factor(),
local = local%>% as.factor(),
support = support %>% as.factor())
# Restrict labelæs
g <- g %N>%
mutate(name = ifelse(dgr_in >= quantile(dgr_in, label.cut, na.rm = TRUE), name, NA))
# Plot nodes & Edges
plot <- g %>%
ggraph(layout = 'fr') +
geom_edge_fan(aes(alpha = weight, edge_color = com_from) ,show.legend = F, spread = 1, arrow = arrow(length = unit(.1, "mm"), type = "closed")) +
geom_node_point(aes(size = dgr_bet, col = com,shape = core)) +
geom_node_text(aes(label = name, size = dgr_in), repel = TRUE)
# Plot density or not?
if(density = TRUE){
plot <- plot +
geom_edge_density(aes(fill = com_from), show.legend = F)
}
# Final graph cosmetics
plot <- plot +
ggtitle(title = title, subtitle = subtitle)
theme_graph(base_family = "sans") +
guides(edge_color = "none")
return(plot)
}
plot_graph = function(g, title = NULL, subtitle = NULL,
density = FALSE,
label.cut = 0
){
# Prepare graph
g <- g %E>%
mutate(com_from = .N()$com[from] %>% as.factor(),
com_to= .N()$com[to] %>% as.factor()) %N>%
mutate(com = com %>% as.factor(),
local = local%>% as.factor(),
support = support %>% as.factor())
# Restrict labelæs
g <- g %N>%
mutate(name = ifelse(dgr_in >= quantile(dgr_in, label.cut, na.rm = TRUE), name, NA))
# Plot nodes & Edges
plot <- g %>%
ggraph(layout = 'fr') +
geom_edge_fan(aes(alpha = weight, edge_color = com_from) ,show.legend = F, spread = 1, arrow = arrow(length = unit(.1, "mm"), type = "closed")) +
geom_node_point(aes(size = dgr_bet, col = com,shape = core)) +
geom_node_text(aes(label = name, size = dgr_in), repel = TRUE)
# Plot density or not?
if(density == TRUE){
plot <- plot +
geom_edge_density(aes(fill = com_from), show.legend = F)
}
# Final graph cosmetics
plot <- plot +
ggtitle(title = title, subtitle = subtitle) +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
return(plot)
}
#### Plotting
g.core %>% plot_graph()
plot_graph = function(g, g.title = NULL, g.subtitle = NULL,
density = FALSE,
label.cut = 0
){
# Prepare graph
g <- g %E>%
mutate(com_from = .N()$com[from] %>% as.factor(),
com_to= .N()$com[to] %>% as.factor()) %N>%
mutate(com = com %>% as.factor(),
local = local%>% as.factor(),
support = support %>% as.factor())
# Restrict labelæs
g <- g %N>%
mutate(name = ifelse(dgr_in >= quantile(dgr_in, label.cut, na.rm = TRUE), name, NA))
# Plot nodes & Edges
plot <- g %>%
ggraph(layout = 'fr') +
geom_edge_fan(aes(alpha = weight, edge_color = com_from) ,show.legend = F, spread = 1, arrow = arrow(length = unit(.1, "mm"), type = "closed")) +
geom_node_point(aes(size = dgr_bet, col = com,shape = core)) +
geom_node_text(aes(label = name, size = dgr_in), repel = TRUE)
# Plot density or not?
if(density == TRUE){
plot <- plot +
geom_edge_density(aes(fill = com_from), show.legend = F)
}
# Final graph cosmetics
plot <- plot +
ggtitle(g.title, subtitle = g.subtitle) +
theme_graph(base_family = "sans") +
guides(edge_color = "none")
return(plot)
}
#### Plotting
g.core %>%
plot_graph(g.title = "Kenya Startups Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0)
g.kenya %>%
plot_graph(g.title = "Kenya Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0)
g.kenya %>%
plot_graph(g.title = "Kenya Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0.5)
ggsave("graph_kenya.pdf", path ="output/figures", width = 30, height = 20, units = "cm"); graphics.off()
#### Plotting
g.core %>%
plot_graph(g.title = "Kenya Core Startups Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0)
ggsave("graph_core.pdf", path ="output/figures", width = 30, height = 20, units = "cm"); graphics.off()
g.kenya %>%
plot_graph(g.title = "Kenya Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0.5)
ggsave("graph_kenya.pdf", path ="output/figures", width = 30, height = 20, units = "cm"); graphics.off()
g.support %>%
plot_graph(g.title = "Kenya plus Support Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0.5)
ggsave("graph_support.pdf", path ="output/figures", width = 30, height = 20, units = "cm"); graphics.off()
g.full %>%
plot_graph(g.title = "Full Network", g.subtitle = "Directed & weighted graph", density = TRUE, label.cut = 0.5)
ggsave("graph_full.pdf", path ="output/figures", width = 30, height = 20, units = "cm"); graphics.off()
com_inspect <- function(g, n_show = Inf){
com_df <- g %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
slice(1:n_show) %>%
ungroup()
return(com_df)
}
com_df <- g.core %>% com_inspect()
com_inspect <- function(g, n_show = 1000){
com_df <- g %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
slice(1:n_show) %>%
ungroup()
return(com_df)
}
com_df <- g.core %>%
com_inspect()
View(com_df)
com_df <- g.kenya %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
slice(1:n_show) %>%
ungroup()
com_df <- g.kenya %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
ungroup()
View(com_df)
com_df <- g.kenya %N>%
as_tibble() %>%
select(com, everything()) %>%
arrange(com, desc(dgr_in_int)) %>%
group_by(com) %>%
ungroup()
com_df
com_df <- g.kenya %N>%
as_tibble() %>%
select(com, everything()) %>%
group_by(com) %>%
summarise(n = n(), n.core = sum(core), n_local = sum(local), n_support = sum(support),
dgr_in_int = mean(dgr_in_int), dgr_out_int = mean(dgr_out_int))
com_df <- g.kenya %N>%
as_tibble() %>%
select(com, everything()) %>%
group_by(com) %>%
summarise(n = n(), n.core = sum(core %>% as.numeric()), n_local = sum(local%>% as.numeric()), n_support = sum(support%>% as.numeric()),
dgr_in_int = mean(dgr_in_int), dgr_out_int = mean(dgr_out_int))
com_df
com_summary <- function(g){
com_df <- g %N>%
as_tibble() %>%
select(com, everything()) %>%
group_by(com) %>%
summarise(n = n(), n.core = sum(core %>% as.numeric()), n_local = sum(local%>% as.numeric()), n_support = sum(support%>% as.numeric()),
mean_dgr_in_int = mean(dgr_in_int), mean_dgr_out_int = mean(dgr_out_int))
return(com_df)
}
# Dataframe with community summary
g.core %>% com_summary() %>% write_csv("output/communities_summary_core.csv")
g.kenya %>% com_summary() %>% write_csv("output/communities_summary_kenya.csv")
g.support %>% com_summary() %>% write_csv("output/communities_summary_support.csv")
g.full %>% com_summary() %>% write_csv("output/communities_summary_full.csv")
